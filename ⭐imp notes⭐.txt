XOR helps u to find out the ones thats not duplicating it self (^) {2^2}=0, {2^2^3}=3, {2^2^3^3}=0

>> is right shift operator and divides the number by 2, << is left shift operator multiplies the number by 2
for negative values it gives garbage value

most significant bit is LHS, and least significant bit is RHS

if u do & with a number and u get LHS as 0 then the number is even

!n (where n is any non-zero number) evaluates to false.
!0 evaluates to true.

2's complement = 1's complement + 1.

The bitwise XOR operator (^) is commonly used to swap two numbers without using a temporary variable.
void swapNumbers(int &a, int &b) {
    a = a ^ b;
    b = a ^ b;
    a = a ^ b;
}

cout<<~-10; // 9
cout<<~0; // -1

int arr[10];
cout << "Base address if Arr is: " << &arr << endl;
cout << "Base address if Arr is: " << arr << endl;
both will return the same address eg: 0x61ff08

int a = 5;
cout << "Size of a: " << sizeof(a) << endl;
the ans = 4

int arr[10];
cout << "Size of arr: " << sizeof(arr) << endl;
the ans = 40

int drr[2] = {1,2,3,44,5};
./main.cpp:33:20: error: excess elements in array initializer

#include <climits>
INT_MIN= -2^31
INT_MAX= 2^31-1
max(a, b)

non-const lvalue reference to type 'int' cannot bind to a temporary of type 'int'
int &t = 6
it cannot be assigned to a interger values , it can only be assigned to a variable

Call by reference, No need to return the value, changes will be reflected in the values of the main function
void incrementBy1(int &n)
{
    n++;
}
int main()
{
    int n;
    cin >> n;
    incrementBy1(n);
    cout <<< n << end
    return 0;
}

#include<vector>
vector<int>v;
v.push_back(x);
v.pop_back();
v.size();
print(v)
v.at(i) // v[i]
v.clear();
v.front();
v.back();

in a 2d array u need to mention then size of the column
because of the formula c*i+j which helps to map 1d array with a 2d array
bool findTarget(int arr[][4], int row, int col, int target ) {

vector< vector<int> > arr(5, vector<int>(10,-1));
//row size -> arr.size( )
for(int i=0; i<arr.size( ); t++) {
    for(int j=0; j<arr[i].size(); j++) {
        cout << arr[i][j] << " ";
    }
    cout << endl;
}

jagged array
vector< vector<int> > brr;
vector<int> vec1(10,0);
vector<int> vec2(5,1);
vector<int> vec3(7,0);
brr.push_back(vec1);
brr.push_back(vec2);
brr.push_back(vec3);

//reverse each row
    for(int i=0;i<matrix.size();i++)
    {
        reverse(matrix[i].begin(), matrix[i].end());
    }

//sort the vector
    sort(v.begin(), v.end());

//custom sorting vector
	// sorting based on the difference from an element
auto cmp = [&](int a, int b)
{
	int diffa=abs(a, k);
	int diffb=abd(b, k);
	return diffa<diffb
}
sort(arr.begin(), arr.end(), cmp)

To calculate the address of a specific element in a two-dimensional array stored in row-major order, you can use the following formula:
Address=Base Address+(Row Index×Number of Columns+Column Index)×Size of each element


The length of an array with indices from i,  j (inclusive) is given by (j - i + 1). This is because there are ((j - i) + 1) elements between indices (i) and (j), and adding 1 accounts for the inclusive range.

sets in c++
#include<set>
set<int> s;
s.insert(1);
for(auto i: s) {
    cout << i << " ";
}

strings
#include<string>
string s;
s.push_back(1+'0');

//good practice
mid=start+(end-start)/2;
mid=(start+end)>>1;

//duplicates
set<vector<int>> x;
x.insert({a,b});
if(x.find({a,b}) != x.end()) {
    cout << "found";
}
x.insert({a,b})

//pairs
#include<utility>
set<pair<int,int>> ans;
ans.insert({nums[i], nums[j]});


//extracting 1st few elements(k) of a vector to a new vector
vector<int> newarr=(arr.begin(), arr.begin() + k)

//add all the elements of a vector
#include<numeric>
int sum = accumulate(arr.begin(), arr.end(), 0);
int sum = accumulate(arr.begin()+i, arr.end()+j); // from i to (j-1)
int sum = accumulate(arr, arr + n, 0); // n is the size of the array

//max element from the vector
int max = *max_element(arr.begin(), arr.end());
int max = *max_element(arr.begin()+i, arr.end()+j); // from i to (j-1)

//maths
1r+2r+3r+...+nr=r(1+2+3+...+n)=r(n(n+1)/2)

//characters
//ascii value of a character
a=97, A=65, 0=48, space=32
char ch[100];
cin.getline(ch, 100); // to take input with spaces
//null character is added at the end of the string which is not visible. it is denaoted as '\0'
//there r 2 ways to input a character array(string)
1. cin >> ch; // it will take input till it encounters a space, and then it will add a null character, this can only print a word
2. cin.getline(ch, 100); // it will take input till it encounters a new line, and then it will add a null character, this can print a sentence
//function to reverse a string
strrev(str);

//strings
str.length(); (int)
str.empty(); (bool)
str.find(str)!=string::npos; (bool, found), npos is negative
str.clear(); (void)
str.substr(starting index, length required); (string)
str.name.at(0) (char)
str.front() (char)
str.back() (char)
str.push_back('a') (void)
str.pop_back() (void)
str.insert(2, "lol") (void)
** str.append(str2) (void)
** str.erase(2, 3) (void) from 2nd index remove 4 characters
** str.replace(2, 3, "lol") (void) from 2nd index remove 3 characters and replace it with "lol"
str.compare(str2) (int) returns 0 if equal, 1 if str>str2, -1 if str<str2

